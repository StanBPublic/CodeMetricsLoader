using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;
using CodeMetricsLoader.Data;

namespace CodeMetricsLoader.CodeCoverage
{
    /// <summary>
    /// Converts xml summary file generated by Report Generator (https://github.com/danielpalme/ReportGenerator) to the collection of Targets
    /// </summary>
    public class CodeCoverageConverter
    {
        public List<Target> Convert(XElement summary)
        {
            var targets = new List<Target>();

            if (summary == null || (summary as XElement).Name.LocalName != "CoverageReport")
            {
                throw new LoaderException("Invalid xml");
            }

            foreach (var assemblyElement in summary.Descendants("Assembly"))
            {
                var target = new Target {Name = GetName(assemblyElement)};
                var module = new Module
                {
                    Name = target.Name, // We don't know if this is dll or exe
                    Metrics = GetElementMetrics(assemblyElement)
                };
                target.Modules.Add(module);
                foreach (var classElement in assemblyElement.Descendants("Class"))
                {
                    string fullClassName = GetName(classElement);
                    var thisClass = CodeCoverageClass.Parse(fullClassName);

                    var type = new CodeMetricsLoader.Data.Type
                    {
                        Name = thisClass.ClassName,
                        Metrics = GetElementMetrics(classElement)
                    };
                    
                    Namespace ns = module.Namespaces.Find(f => f.Name == thisClass.Namespace);
                    if (ns == null)
                    {
                        // Haven't seen this namespace yet
                        ns = new Namespace {Name = thisClass.Namespace};
                        module.Namespaces.Add(ns);
                    }

                    ns.Types.Add(type);
                }

                // Need to update namespace stats based on the types we found
                module.Namespaces.ForEach(n => n.UpdateMetricsFromTypes());

                targets.Add(target);
            }

            return targets;
        }

        private static string GetDescendantValue(XElement element, string name)
        {
            return element.Descendants(name).First().Value;
        }

        private static string GetName(XElement element)
        {
            return element.Attribute("name").Value;
        }

        private Metrics GetElementMetrics(XElement element)
        {
            var attribute = element.Attribute("branchcoverage");
            if (attribute == null)
            {
                throw new ArgumentException("No code coverage data");
            }
            decimal coverageDecimal;
            int? coverageInt = null;
            if (decimal.TryParse(attribute.Value, out coverageDecimal))
            {
                coverageInt = (int) Math.Round(coverageDecimal);
            }
            return new Metrics { CodeCoverage = coverageInt };
        }
    }
}